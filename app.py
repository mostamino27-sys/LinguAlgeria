from flask import Flask, render_template, request, jsonify
from flask_cors import CORS
import os
import requests
import re

app = Flask(__name__)
CORS(app)

# ÿ•ÿπÿØÿßÿØÿßÿ™ OpenRouter
OPENROUTER_API_KEY = os.environ.get('OPENROUTER_API_KEY')
API_URL = 'https://openrouter.ai/api/v1/chat/completions'
MODEL = 'meta-llama/llama-3.2-3b-instruct:free'  # ‚úÖ Model ŸÖÿ¨ÿßŸÜŸä ŸÖÿ∂ŸÖŸàŸÜ!

def call_ai(messages, max_tokens=2000):
    """ÿßÿ≥ÿ™ÿØÿπÿßÿ° Llama 3.2 ÿπÿ®ÿ± OpenRouter"""
    if not OPENROUTER_API_KEY:
        raise Exception('Cl√© API non configur√©e')
    
    try:
        response = requests.post(
            API_URL,
            headers={
                'Authorization': f'Bearer {OPENROUTER_API_KEY}',
                'Content-Type': 'application/json',
                'HTTP-Referer': 'https://lingualgeria.up.railway.app',
                'X-Title': 'LinguAlgeria'
            },
            json={
                'model': MODEL,
                'messages': messages,
                'max_tokens': max_tokens,
                'temperature': 0.7
            },
            timeout=90
        )
        
        if response.status_code != 200:
            error_msg = f"Erreur {response.status_code}"
            try:
                error_data = response.json()
                if 'error' in error_
                    error_msg = error_data['error'].get('message', error_msg)
            except:
                pass
            raise Exception(error_msg)
        
        data = response.json()
        return data['choices'][0]['message']['content']
        
    except requests.exceptions.Timeout:
        raise Exception('D√©lai d√©pass√©')
    except Exception as e:
        raise Exception(str(e))

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/api/analyze', methods=['POST'])
def analyze_dialect():
    try:
        data = request.get_json()
        text = data.get('text', '').strip()
        
        if not text:
            return jsonify({'error': 'Texte requis', 'success': False}), 400
        
        prompt = f"""Analyse ce texte en dialecte alg√©rien et identifie l'influence fran√ßaise.

Texte: {text}

Instructions:
1. Identifie TOUS les mots d'origine fran√ßaise
2. Donne le mot fran√ßais original entre parenth√®ses
3. Propose des alternatives en arabe/darija
4. Calcule le pourcentage approximatif de fran√ßais
5. Identifie les domaines (cuisine, transport, etc.)

Format de r√©ponse:

üìù TEXTE ANALYS√â:
[R√©√©cris le texte avec les mots fran√ßais en MAJUSCULES]

üìä STATISTIQUES:
‚Ä¢ Pourcentage fran√ßais: X%
‚Ä¢ Nombre de mots fran√ßais: X
‚Ä¢ Domaines: [liste]

üîç MOTS FRAN√áAIS IDENTIFI√âS:
1. [mot alg√©rien] (fran√ßais: xxx) ‚Üí Alternative arabe: [xxx]
2. ...

üí° ANALYSE SOCIOLINGUISTIQUE:
[Br√®ve analyse de 2-3 phrases]

R√©ponds en fran√ßais de mani√®re claire."""

        result = call_ai([
            {
                'role': 'system',
                'content': 'Tu es un sociolinguiste expert du dialecte alg√©rien. Tu analyses avec pr√©cision l\'influence fran√ßaise.'
            },
            {
                'role': 'user',
                'content': prompt
            }
        ])
        
        return jsonify({'result': result, 'success': True})
        
    except Exception as e:
        print(f'Erreur: {str(e)}')
        return jsonify({'error': str(e), 'success': False}), 500

@app.route('/api/compare', methods=['POST'])
def compare_texts():
    try:
        data = request.get_json()
        text1 = data.get('text1', '').strip()
        text2 = data.get('text2', '').strip()
        
        if not text1 or not text2:
            return jsonify({'error': 'Deux textes requis', 'success': False}), 400
        
        prompt = f"""Compare ces deux textes alg√©riens en termes d'influence fran√ßaise:

Texte 1: {text1}
Texte 2: {text2}

Analyse comparative:
1. Pourcentage de fran√ßais dans chaque texte
2. Quel texte est le plus influenc√© et pourquoi?
3. Diff√©rences dans les domaines lexicaux
4. Conclusions sociolinguistiques

R√©ponds en fran√ßais de mani√®re structur√©e."""

        result = call_ai([
            {
                'role': 'system',
                'content': 'Tu es un sociolinguiste comparant des textes alg√©riens.'
            },
            {
                'role': 'user',
                'content': prompt
            }
        ])
        
        return jsonify({'result': result, 'success': True})
        
    except Exception as e:
        print(f'Erreur: {str(e)}')
        return jsonify({'error': str(e), 'success': False}), 500

@app.route('/health')
def health():
    return jsonify({
        'status': 'ok',
        'api_configured': bool(OPENROUTER_API_KEY),
        'model': MODEL
    })

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    print('=' * 60)
    print('üá©üáø LinguAlgeria - D√©marrage')
    print(f'ü§ñ Model: {MODEL}')
    print(f'üîë API: {"‚úÖ" if OPENROUTER_API_KEY else "‚ùå"}')
    print('=' * 60)
    app.run(host='0.0.0.0', port=port, debug=False)
